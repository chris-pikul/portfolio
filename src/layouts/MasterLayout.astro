---
/**
 * Chris Pikul's Portfolio, designed and coded by Chris Pikul.
 * Copyright 2022 Chris Pikul. All Rights Reserved.
 * 
 * Master layout that should wrap or be the derivitive of all other layouts
 */
import { SEO } from 'astro-seo';
import type { Props as SEOProps } from 'astro-seo';

import '@styles/master.scss';

import Navigation from '@components/SiteNavigation.astro';

// Prepare objects for SEO injection, using optional overrides provided by the page
const seoOveride:SEOProps = Astro.props.seo ?? {};
const seoProps:SEOProps = {
  title: 'Chris Pikul',
  description: 'Portfolio site for Chris Pikul, developer for hire',
  openGraph: {
    basic: {
      title: 'Portfolio of Chris Pikul',
      type: 'website',
      image: '/dummy.png',
    },
    image: {
      url: '/dummy.png',
      type: 'image/png',
      alt: 'dummy image',
    },
    optional: {
      description: 'Personal portfolio site for Chris Pikul, developer for hire.',
      locale: 'en-US',
      siteName: 'Chris Pikul',
    }
  },
  twitter: {
    card: 'summary',
    site: '@ChrisPikul510',
    creator: '@ChrisPikul510',
  },
  extend: {
    link: [
      { rel: 'icon', href: '/favicon.ico' },
    ],
    meta: [
      { name: 'viewport', content: 'width=device-width, initial-scale=1' },
    ],
  },

  ...seoOveride,
};

// Copyright injection
const thisYear = (new Date()).getFullYear();

---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset='UTF-8'>
  <SEO {...seoProps} />

  <link rel='preload' as='style' href='/fonts/SourceSans3/SourceSans3.css' />
  <link rel='stylesheet' href='/fonts/SourceSans3/SourceSans3.css' media='print' onload='this.media = "all"' />
  
  <noscript>
    <link rel='stylesheet' href='/fonts/SourceSans3/SourceSans3.css' />
  </noscript>
</head>
<body class='no-js'>
  <div id='master-sides'>
    <Navigation />

    <div id='master-right' class='landscape intro-second'>
      <div class='separator separator-round' />
    </div>
  </div>
  
  <div id='master-content'>
    <slot />

    <footer id='master-footer'>Â©{ thisYear } Chris Pikul.<br/>All Rights Reserved.</footer>
  </div>

  <div id='fx-overlay-grain'></div>
  <div id='fx-overlay-vignette'></div>

  <script is:inline>document.body.classList.remove('no-js');</script>
</body>
</html>

<style lang="scss" is:global>
  @use '../styles/base' as *;
  @use '../styles/colors' as *;

  #master-sides {
    position: fixed;
    top: 0;
    right: 0;
    bottom: auto;
    left: 0;
    z-index: 9000;
  }

  #master-content {
    padding: 0 1rem;
  }
  
  /* Site-wide footer */
  #master-footer {

    /* Line-up with bottom */
    margin-top: 4rem;
    padding-top: 1rem;
    padding-bottom: 4rem;

    @include font-code(1rem);
    text-align: center;
    color: $shade-600;
    color: var(--shade-600);

    border-top: 1px solid var(--shade-300);
  }

  #fx-overlay-grain, #fx-overlay-vignette {
    display: none;
    pointer-events: none;
  }

  @supports (mix-blend-mode: overlay) {
    #fx-overlay-grain {
      display: block;
      pointer-events: none;
  
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 8000;
  
      background: url('/img/noise-grain-512.png') top left repeat;
      mix-blend-mode: color-burn;
      opacity: 1;
    }
  
    #fx-overlay-vignette {
      display: block;
      pointer-events: none;
  
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 9000;
  
      background: radial-gradient(farthest-corner at center, $vignette-start 30%, $vignette-end);
      mix-blend-mode: color-burn;
      opacity: 0.3;
    }
  }

  /* Landscape Switch */
  @media screen and (min-device-width: 768px) and (orientation: landscape) {
    #master-sides {
      top: 50%;
      right: unset;
      bottom: unset;
      left: 50%;
      width: 100%;
      max-width: 75vw;
      height: 62vh;
      min-height: 375px;
      z-index: 9000;

      transform: translate(-50%, -50%);

      pointer-events: none;

      & * { pointer-events: all; }

      #master-right {
        display: flex;
        flex-flow: row nowrap;

        position: absolute;
        top: 50%;
        right: 0;
        width: 2.25rem;
        height: 62vh;
        min-height: 375px;

        margin: 0 0 0 2rem;
        padding: 0;

        transform: translateY(-50%);

        color: $shade-300;
        color: var(--shade-300);

        .separator {
          width: 2px;
          height: 100%;
          margin: 0 6px;

          &::before {
            top: 0;
            right: auto;
            bottom: auto;
            left: -3px;
          }

          &::after {
            top: auto;
            right: auto;
            bottom: 0;
            left: -3px;
          }
        }
      }
    }

    #master-content {
      position: relative;
      width: 100%;
      max-width: 60vw;
      height: 100%;

      .page > .section-anchor {
        top: -19vh;
      }
    }

    #master-footer {
      padding-bottom: 19vh;
    }
  }

  /* Dark Mode */
  @media screen and (prefers-color-scheme: 'dark') {
    #fx-overlay-grain {
      opacity: 0.2;
    }

    #fx-overlay-vignette {
      background: radial-gradient(farthest-corner at center, rgba(0, 0, 0, 0) 50%, $vignette-end);
      opacity: 0.15;
    }
  }
</style>

<script>
  (() => {
    // Web-font loading strategy
    const markFontsLoaded = () => document.documentElement.classList.add('fonts-loaded');
    if(sessionStorage && sessionStorage.fontsLoaded) {
      markFontsLoaded();
    } else if('fonts' in document) {
      Promise.all([
        document.fonts.load('300 1em "Source Sans 3"')
      ]).then(() => {
        if(sessionStorage)
          sessionStorage.fontsLoaded = true;
      }).catch(err => {
        console.error(`error loading web-fonts: ${err}`);
      }).finally(markFontsLoaded);
    }

    // Animate the grain effect
    const grainEl = document.getElementById('fx-overlay-grain');
    if(grainEl) {
      const origOpacity = parseFloat(getComputedStyle(grainEl).opacity);
      const framerate = (1000 / 12);
      const randPerc = () => Math.trunc(Math.random() * 100) + '%';
      const anim = () => {
        grainEl.style.backgroundPositionX = randPerc();
        grainEl.style.backgroundPositionY = randPerc();
        grainEl.style.opacity = (origOpacity - (Math.random() * 0.1)).toPrecision(2);

        setTimeout(anim, framerate);
      }
      setTimeout(anim, framerate);
    }
  })();
</script>
